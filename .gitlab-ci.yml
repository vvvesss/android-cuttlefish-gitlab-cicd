# Complete Android + Cuttlefish CI/CD Pipeline
stages:
  # - prepare
  - verify
  - build
  - test
  - deploy
  #- cleanup

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  ANDROID_SDK_ROOT: "/opt/android-sdk"
  ANDROID_HOME: "/opt/android-sdk"
  CUTTLEFISH_ZONE: "europe-west1-c"
  INSTANCE_GROUP: "cuttlefish-group"


# Job Templates
.gcp_auth: &gcp_auth
  - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > /tmp/gcp-key.json
  - gcloud auth activate-service-account --key-file /tmp/gcp-key.json
  - gcloud config set project $GCP_PROJECT_ID

.android_setup: &android_setup
  - apt-get update -qq && apt-get install -y openjdk-11-jdk wget unzip curl
  - export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
  - |
    if [ ! -d "/opt/android-sdk/cmdline-tools" ]; then
      mkdir -p /opt/android-sdk
      cd /tmp
      curl -L -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
      unzip -q tools.zip
      mkdir -p /opt/android-sdk/cmdline-tools
      mv cmdline-tools /opt/android-sdk/cmdline-tools/latest
    fi
  - export PATH=/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:$PATH
  - mkdir -p /opt/android-sdk/licenses
  - echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > /opt/android-sdk/licenses/android-sdk-license
  - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> /opt/android-sdk/licenses/android-sdk-license
  - echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> /opt/android-sdk/licenses/android-sdk-license
  - yes | sdkmanager --licenses > /dev/null 2>&1 || true
  - sdkmanager "platforms;android-30" "build-tools;30.0.3" "platform-tools"

# üîç STAGE 0: VERIFY - Check if infrastructure exists
check_infrastructure:
  stage: verify
  image: google/cloud-sdk:alpine
  before_script:
    - *gcp_auth
  script:
    - echo "üîç Verifying Cuttlefish infrastructure exists..."
    
    # Check if instance group exists
    - |
      if gcloud compute instance-groups managed describe $INSTANCE_GROUP --zone=$CUTTLEFISH_ZONE >/dev/null 2>&1; then
        echo "‚úÖ Instance group '$INSTANCE_GROUP' exists"
      else
        echo "‚ùå Instance group '$INSTANCE_GROUP' not found!"
        echo "üí° Run this manually to create it:"
        echo "   cd terraform && terraform apply -auto-approve -var=\"project_id=$GCP_PROJECT_ID\""
        exit 1
      fi
    
    # Check if instance template exists
    - TEMPLATE_NAME=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP --zone=$CUTTLEFISH_ZONE --format="value(versions[0].instanceTemplate)" | sed 's|.*/||')
    - |
      if gcloud compute instance-templates describe $TEMPLATE_NAME >/dev/null 2>&1; then
        echo "‚úÖ Instance template '$TEMPLATE_NAME' exists"
      else
        echo "‚ùå Instance template '$TEMPLATE_NAME' not found!"
        exit 1
      fi
    
    # Check current instance group size
    - CURRENT_SIZE=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP --zone=$CUTTLEFISH_ZONE --format="value(targetSize)")
    - echo "üìä Current instance group size $CURRENT_SIZE"
    
    # Export infrastructure info for other jobs
    - echo "TEMPLATE_NAME=$TEMPLATE_NAME" > infrastructure_info.env
    - echo "CURRENT_SIZE=$CURRENT_SIZE" >> infrastructure_info.env
    - cat infrastructure_info.env
    
    - echo "‚úÖ Infrastructure verification complete!"
  artifacts:
    paths:
      - infrastructure_info.env
    expire_in: 1 hour
  only:
    - main
    - develop

# TEST INFRA STAGE: Validate GCP credentials
# test_infrastructure_plan:
#   stage: prepare
#   image: hashicorp/terraform:latest
#   before_script:
#     # Install gcloud in the terraform image
#     - apk add --no-cache curl python3 py3-pip bash
#     - curl https://sdk.cloud.google.com | bash -s -- --disable-prompts
#     - export PATH=$PATH:/root/google-cloud-sdk/bin
#     - gcloud --version
#     # Authenticate with GCP
#     - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > /tmp/gcp-key.json
#     - gcloud auth activate-service-account --key-file /tmp/gcp-key.json
#     - gcloud config set project "$GCP_PROJECT_ID"
#   script:
#     - echo "üß™ Testing Terraform plan..."
#     - cd terraform
#     - terraform init
#     - terraform plan -var="project_id=$GCP_PROJECT_ID"
#     - echo "‚úÖ Terraform plan successful!"
#   when: manual
#   only:
#     - main

# üèóÔ∏è STAGE 1: PREPARE - Set up GCP infrastructure
# One time job
# prepare_infrastructure:
#   stage: prepare
#   image: hashicorp/terraform:latest
#   before_script:
#     - apk add --no-cache curl python3 py3-pip bash
#     - curl https://sdk.cloud.google.com | bash -s -- --disable-prompts
#     - export PATH=$PATH:/root/google-cloud-sdk/bin
#     - gcloud --version
#     - *gcp_auth
#   script:
#     - echo "üèóÔ∏è Setting up Cuttlefish infrastructure..."
#     - cd terraform
#     - terraform init
#     - terraform plan -out=tfplan -var="project_id=$GCP_PROJECT_ID"
#     - terraform apply -auto-approve tfplan
#     - terraform output -json > ../infrastructure_outputs.json
#     - echo "‚úÖ Infrastructure ready"
#   artifacts:
#     paths:
#       - terraform/tfplan
#       - infrastructure_outputs.json
#     expire_in: 1 day
#   # when: manual
#   only:
#     - main
#     - develop

# üì± STAGE 2: BUILD - Your working Android build
build_debug:
  stage: build
  image: ubuntu:22.04
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - /opt/android-sdk
  before_script:
    - *android_setup
    - cd $CI_PROJECT_DIR
  script:
    - echo "üîß Building debug APK..."
    - chmod +x ./gradlew
    - ./gradlew assembleDebug --no-daemon
    - echo "‚úÖ Build successful!"
    - ls -la app/build/outputs/apk/debug/
  artifacts:
    paths:
      - app/build/outputs/apk/debug/
    expire_in: 1 hour

# üß™ STAGE 3: TEST - Unit tests (your existing working test)
unit_tests:
  stage: test
  image: ubuntu:22.04
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - /opt/android-sdk
  before_script:
    - *android_setup
    - cd $CI_PROJECT_DIR  # Ensure we're in the right directory
    - pwd                 # Debug: show current directory
    - ls -la             # Debug: show files in current directory
  script:
    - echo "üß™ Running unit tests..."
    - chmod +x gradlew
    - ./gradlew test --no-daemon
    - echo "‚úÖ Unit tests completed!"
    # Use the test reporter
    - python3 scripts/test-reporter.py app/build/test-results/test*/TEST-*.xml || echo "No test results to process"
  artifacts:
    reports:
      junit: app/build/test-results/test*/TEST-*.xml
    paths:
      - app/build/reports/tests/
    expire_in: 1 hour
  dependencies:
    - build_debug

# ü§ñ CUTTLEFISH INTEGRATION TESTS - PRIVATE IP VERSION
cuttlefish_integration_tests:
  stage: test
  image: google/cloud-sdk:alpine
  before_script:
    - *gcp_auth
    - apk add --no-cache android-tools python3 py3-requests netcat-openbsd
    - chmod +x scripts/test-orchestrator.sh
    - source infrastructure_info.env || echo "No infrastructure info found"
    - echo "üìã Using template ${TEMPLATE_NAME:-unknown}"
  script:
    - echo "üê† Starting Cuttlefish integration tests (Private IP)..."
    
    # Scale up Cuttlefish instance
    - echo "üìà Scaling up Cuttlefish instance..."
    - gcloud compute instance-groups managed resize $INSTANCE_GROUP --size=1 --zone=$CUTTLEFISH_ZONE
    
    # Wait for instance to be created and running
    - |
      echo "‚è≥ Waiting for instance to be running..."
      timeout 300 bash -c "
        while true; do
          INSTANCE_NAME=\$(gcloud compute instance-groups managed list-instances $INSTANCE_GROUP --zone=$CUTTLEFISH_ZONE --format='value(name)' | head -1)
          if [ -n \"\$INSTANCE_NAME\" ]; then
            INSTANCE_STATUS=\$(gcloud compute instances describe \$INSTANCE_NAME --zone=$CUTTLEFISH_ZONE --format='value(status)')
            if [ \"\$INSTANCE_STATUS\" = \"RUNNING\" ]; then
              echo \"Instance \$INSTANCE_NAME is running!\"
              break
            fi
            echo \"Instance \$INSTANCE_NAME status: \$INSTANCE_STATUS\"
          fi
          echo 'Waiting for instance to be running...'
          sleep 10
        done
      "
    
    # Get instance details - USE PRIVATE IP
    - ACTUAL_INSTANCE=$(gcloud compute instance-groups managed list-instances $INSTANCE_GROUP --zone=$CUTTLEFISH_ZONE --format="value(name)" | head -1)
    - echo "üì± Found instance $ACTUAL_INSTANCE"
    
    # Get PRIVATE IP (no external IP)
    - INSTANCE_PRIVATE_IP=$(gcloud compute instances describe $ACTUAL_INSTANCE --zone=$CUTTLEFISH_ZONE --format="value(networkInterfaces[0].networkIP)")
    - echo "üîí Instance Private IP $INSTANCE_PRIVATE_IP"
    
    # Verify we're in the same VPC (should be able to reach private IP)
    - echo "üåê Testing VPC connectivity..."
    - ping -c 2 $INSTANCE_PRIVATE_IP || echo "Ping failed, but this is normal (ICMP might be blocked)"
    
    # Wait for Cuttlefish ADB to be ready on PRIVATE IP
    - |
      echo "üîå Waiting for Cuttlefish ADB to be ready on private IP..."
      echo "‚ö†Ô∏è  Note: Cuttlefish startup can take 10-15 minutes..."
      timeout 900 bash -c "
        while ! nc -z $INSTANCE_PRIVATE_IP 6520; do
          echo 'Waiting for ADB on private IP $INSTANCE_PRIVATE_IP:6520... (this can take 10+ minutes)'
          sleep 30
        done
      "
    
    # Test ADB connection to PRIVATE IP
    - echo "üîó Testing ADB connection to private instance..."
    - adb connect $INSTANCE_PRIVATE_IP:6520
    - adb devices
    - echo "üìã Connected devices:"
    - adb devices -l
    
    # Install and test APK
    - echo "üì± Installing APK on private Cuttlefish device..."
    - adb -s $INSTANCE_PRIVATE_IP:6520 install app/build/outputs/apk/debug/app-debug.apk
    
    # Run tests on private instance
    - echo "üß™ Running app tests on private instance..."
    - |
      # Start the app
      adb -s $INSTANCE_PRIVATE_IP:6520 shell am start -n codepath.demos.helloworlddemo/.HelloWorldActivity
      sleep 5
      
      # Take screenshot
      adb -s $INSTANCE_PRIVATE_IP:6520 shell screencap -p /sdcard/screenshot.png
      adb -s $INSTANCE_PRIVATE_IP:6520 pull /sdcard/screenshot.png screenshot.png
      
      # Get app info
      adb -s $INSTANCE_PRIVATE_IP:6520 shell dumpsys package codepath.demos.helloworlddemo > package_info.txt
      
      # Check running processes
      adb -s $INSTANCE_PRIVATE_IP:6520 shell ps | grep helloworlddemo > running_processes.txt || echo "App not found in process list"
      
      # Get logcat
      adb -s $INSTANCE_PRIVATE_IP:6520 logcat -d | grep helloworlddemo > app_logcat.txt || echo "No app logs found"
    
    # Create test report
    - |
      echo "üìä Creating test report for private instance..."
      cat > test_results.txt << EOF
      Cuttlefish Integration Test Results (Private Instance)
      ======================================================
      
      Device Private IP: $INSTANCE_PRIVATE_IP:6520
      VPC Network: cryptoapis/belgium-europe-west-vm
      APK Installation: $([ -f package_info.txt ] && echo "SUCCESS" || echo "FAILED")
      Screenshot Captured: $([ -f screenshot.png ] && echo "SUCCESS" || echo "FAILED")
      App Process Check: $([ -s running_processes.txt ] && echo "SUCCESS" || echo "FAILED")
      
      Network Security: PRIVATE (No external access)
      Test Summary: $([ -f screenshot.png ] && echo "PASSED" || echo "FAILED")
      EOF
      
      cat test_results.txt
    
    # Debug: Show network configuration
    - echo "üîç Network debug info:"
    - echo "GKE Pod IP $(hostname -i)"
    - echo "Can reach Cuttlefish $(nc -z $INSTANCE_PRIVATE_IP 6520 && echo 'YES' || echo 'NO')"
    
  after_script:
    - *gcp_auth
    - echo "üìâ Scaling down private Cuttlefish instances..."
    - gcloud compute instance-groups managed resize $INSTANCE_GROUP --size=0 --zone=$CUTTLEFISH_ZONE || echo "Failed to scale down"
  artifacts:
    paths:
      - test_results.txt
      - screenshot.png
      - package_info.txt
      - running_processes.txt
      - app_logcat.txt
    expire_in: 1 week
  dependencies:
    - build_debug
    - check_infrastructure
  timeout: 60m
  allow_failure: true

# üîê STAGE 3: GCP Connection Test
test_gcp_connection:
  stage: test
  image: google/cloud-sdk:alpine
  before_script:
    - *gcp_auth
  script:
    - echo "üîê Testing GCP connection..."
    - gcloud compute zones list --limit=5
    - gcloud compute instance-templates list
    - echo "‚úÖ GCP connection successful!"
  only:
    - main

# üìä STAGE 4: DEPLOY - Generate comprehensive report
generate_final_report:
  stage: deploy
  image: python:3.9-alpine
  script:
    - echo "üìä Generating final pipeline report..."
    - pip install jinja2 requests
    - python3 scripts/test-reporter.py --generate-final-report || echo "Report generation completed"
  artifacts:
    paths:
      - final-pipeline-report.html
      - final-pipeline-report.json
    expire_in: 1 week
  dependencies:
    - unit_tests
    - cuttlefish_integration_tests
  when: always

# # üßπ STAGE 5: CLEANUP - Manual cleanup of infrastructure
# cleanup_infrastructure:
#   stage: cleanup
#   image: hashicorp/terraform:latest
#   before_script:
#     - apk add --no-cache curl python3 py3-pip bash
#     - curl https://sdk.cloud.google.com | bash -s -- --disable-prompts
#     - export PATH=$PATH:/root/google-cloud-sdk/bin
#     - gcloud --version
#     - *gcp_auth
#   script:
#     - echo "üßπ Cleaning up infrastructure..."
#     - cd terraform
#     - terraform destroy -auto-approve -var="project_id=$GCP_PROJECT_ID"
#     - echo "‚úÖ Infrastructure cleaned up"
#   when: manual
#   only:
#     - main
